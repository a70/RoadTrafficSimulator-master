// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var Lane, Road, _, max, min, settings;

  min = Math.min, max = Math.max;

  require('../helpers');

  _ = require('underscore');

  Lane = require('./lane');

  settings = require('../settings');

  Road = (function() {
    function Road(source, target) {
      this.source = source;
      this.target = target;
      this.id = _.uniqueId('road');
      this.lanes = [];
      this.lanesNumber = null;
      this.update();
    }

    Road.copy = function(road) {
      var result;
      result = Object.create(Road.prototype);
      _.extend(result, road);
      if (result.lanes == null) {
        result.lanes = [];
      }
      return result;
    };

    Road.prototype.toJSON = function() {
      var obj;
      return obj = {
        id: this.id,
        source: this.source.id,
        target: this.target.id
      };
    };

    Road.property('length', {
      get: function() {
        return this.targetSide.target.subtract(this.sourceSide.source).length;
      }
    });

    Road.property('leftmostLane', {
      get: function() {
        return this.lanes[this.lanesNumber - 1];
      }
    });

    Road.property('rightmostLane', {
      get: function() {
        return this.lanes[0];
      }
    });

    Road.prototype.getTurnDirection = function(other) {
      var side1, side2, turnNumber;
      if (this.target !== other.source) {
        throw Error('invalid roads');
      }
      side1 = this.targetSideId;
      side2 = other.sourceSideId;
      return turnNumber = (side2 - side1 - 1 + 8) % 4;
    };

    Road.prototype.update = function() {
      var base, i, j, k, ref, ref1, results, sourceSplits, targetSplits;
      if (!(this.source && this.target)) {
        throw Error('incomplete road');
      }
      this.sourceSideId = this.source.rect.getSectorId(this.target.rect.center());
      this.sourceSide = this.source.rect.getSide(this.sourceSideId).subsegment(0.5, 1.0);
      this.targetSideId = this.target.rect.getSectorId(this.source.rect.center());
      this.targetSide = this.target.rect.getSide(this.targetSideId).subsegment(0, 0.5);
      this.lanesNumber = min(this.sourceSide.length, this.targetSide.length) | 0;
      this.lanesNumber = max(2, this.lanesNumber / settings.gridSize | 0);
      sourceSplits = this.sourceSide.split(this.lanesNumber, true);
      targetSplits = this.targetSide.split(this.lanesNumber);
      if ((this.lanes == null) || this.lanes.length < this.lanesNumber) {
        if (this.lanes == null) {
          this.lanes = [];
        }
        for (i = j = 0, ref = this.lanesNumber - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if ((base = this.lanes)[i] == null) {
            base[i] = new Lane(sourceSplits[i], targetSplits[i], this);
          }
        }
      }
      results = [];
      for (i = k = 0, ref1 = this.lanesNumber - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
        this.lanes[i].sourceSegment = sourceSplits[i];
        this.lanes[i].targetSegment = targetSplits[i];
        this.lanes[i].leftAdjacent = this.lanes[i + 1];
        this.lanes[i].rightAdjacent = this.lanes[i - 1];
        this.lanes[i].leftmostAdjacent = this.lanes[this.lanesNumber - 1];
        this.lanes[i].rightmostAdjacent = this.lanes[0];
        results.push(this.lanes[i].update());
      }
      return results;
    };

    return Road;

  })();

  module.exports = Road;

}).call(this);
