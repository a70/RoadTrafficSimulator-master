// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var Car, Intersection, Pool, Rect, Road, World, _, random, settings, ws,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  random = Math.random;

  require('../helpers');

  _ = require('underscore');

  Car = require('./car');

  Intersection = require('./intersection');

  Road = require('./road');

  Pool = require('./pool');

  Rect = require('../geom/rect');

  settings = require('../settings');

  ws = new WebSocket("ws://localhost:8025/websockets/echo");

  World = (function() {
    var sendDataToServer;

    function World() {
      this.onTick = bind(this.onTick, this);
      this.set({});
    }

    World.property('instantSpeed', {
      get: function() {
        var speeds;
        speeds = _.map(this.cars.all(), function(car) {
          return car.speed;
        });
        if (speeds.length === 0) {
          return 0;
        }
        return (_.reduce(speeds, function(a, b) {
          return a + b;
        })) / speeds.length;
      }
    });

    World.prototype.set = function(obj) {
      if (obj == null) {
        obj = {};
      }
      this.intersections = new Pool(Intersection, obj.intersections);
      this.roads = new Pool(Road, obj.roads);
      this.cars = new Pool(Car, obj.cars);
      return this.carsNumber = 0;
    };

    World.prototype.save = function() {
      var data;
      data = _.extend({}, this);
      delete data.cars;
      return localStorage.world = JSON.stringify(data);
    };

    World.prototype.load = function() {
      var data, id, intersection, ref, ref1, results, road;
      data = localStorage.world;
      data = data && JSON.parse(data);
      if (data == null) {
        return;
      }
      this.clear();
      this.carsNumber = data.carsNumber || 0;
      ref = data.intersections;
      for (id in ref) {
        intersection = ref[id];
        this.addIntersection(Intersection.copy(intersection));
      }
      ref1 = data.roads;
      results = [];
      for (id in ref1) {
        road = ref1[id];
        road = Road.copy(road);
        road.source = this.getIntersection(road.source);
        road.target = this.getIntersection(road.target);
        results.push(this.addRoad(road));
      }
      return results;
    };

    World.prototype.generateMap = function(minX, maxX, minY, maxY) {
      var gridSize, i, intersection, intersectionsNumber, j, k, l, map, previous, rect, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, step, x, y;
      if (minX == null) {
        minX = -2;
      }
      if (maxX == null) {
        maxX = 2;
      }
      if (minY == null) {
        minY = -2;
      }
      if (maxY == null) {
        maxY = 2;
      }
      this.clear();
      intersectionsNumber = (0.8 * (maxX - minX + 1) * (maxY - minY + 1)) | 0;
      map = {};
      gridSize = settings.gridSize;
      step = 5 * gridSize;
      this.carsNumber = 1;
      while (intersectionsNumber > 0) {
        x = _.random(minX, maxX);
        y = _.random(minY, maxY);
        if (map[[x, y]] == null) {
          rect = new Rect(step * x, step * y, gridSize, gridSize);
          intersection = new Intersection(rect);
          this.addIntersection(map[[x, y]] = intersection);
          intersectionsNumber -= 1;
        }
      }
      for (x = i = ref = minX, ref1 = maxX; ref <= ref1 ? i <= ref1 : i >= ref1; x = ref <= ref1 ? ++i : --i) {
        previous = null;
        for (y = j = ref2 = minY, ref3 = maxY; ref2 <= ref3 ? j <= ref3 : j >= ref3; y = ref2 <= ref3 ? ++j : --j) {
          intersection = map[[x, y]];
          if (intersection != null) {
            if (random() < 0.9) {
              if (previous != null) {
                this.addRoad(new Road(intersection, previous));
              }
              if (previous != null) {
                this.addRoad(new Road(previous, intersection));
              }
            }
            previous = intersection;
          }
        }
      }
      for (y = k = ref4 = minY, ref5 = maxY; ref4 <= ref5 ? k <= ref5 : k >= ref5; y = ref4 <= ref5 ? ++k : --k) {
        previous = null;
        for (x = l = ref6 = minX, ref7 = maxX; ref6 <= ref7 ? l <= ref7 : l >= ref7; x = ref6 <= ref7 ? ++l : --l) {
          intersection = map[[x, y]];
          if (intersection != null) {
            if (random() < 0.9) {
              if (previous != null) {
                this.addRoad(new Road(intersection, previous));
              }
              if (previous != null) {
                this.addRoad(new Road(previous, intersection));
              }
            }
            previous = intersection;
          }
        }
      }
      return null;
    };

    World.prototype.clear = function() {
      return this.set({});
    };

    World.prototype.onTick = function(delta) {
      var car, id, intersection, ref, ref1, results;
      if (delta > 1) {
        throw Error('delta > 1');
      }
      this.refreshCars();
      ref = this.intersections.all();
      for (id in ref) {
        intersection = ref[id];
        intersection.controlSignals.onTick(delta);
      }
      ref1 = this.cars.all();
      results = [];
      for (id in ref1) {
        car = ref1[id];
        car.move(delta);
        if (!car.alive) {
          results.push(this.removeCar(car));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    World.prototype.findAllCars = function() {
      console.log("called");
      return this.cars.all();
    };

    World.prototype.refreshCars = function() {
      if (this.cars.length < this.carsNumber) {
        this.addRandomCar();
      }
      if (this.cars.length > this.carsNumber) {
        return this.removeRandomCar();
      }
    };

    World.prototype.addRoad = function(road) {
      this.roads.put(road);
      road.source.roads.push(road);
      road.target.inRoads.push(road);
      return road.update();
    };

    World.prototype.getRoad = function(id) {
      return this.roads.get(id);
    };

    World.prototype.addCar = function(car) {
      return this.cars.put(car);
    };

    World.prototype.getCar = function(id) {
      return this.cars.get(id);
    };

    World.prototype.removeCar = function(car) {
      return this.cars.pop(car);
    };

    World.prototype.addIntersection = function(intersection) {
      return this.intersections.put(intersection);
    };

    World.prototype.getIntersection = function(id) {
      return this.intersections.get(id);
    };

    World.prototype.addRandomCar = function() {
      var lane, road;
      road = _.sample(this.roads.all());
      if (road != null) {
        lane = _.sample(road.lanes);
        if (lane != null) {
          return this.addCar(new Car(lane));
        }
      }
    };

    World.prototype.removeRandomCar = function() {
      var car;
      car = _.sample(this.cars.all());
      if (car != null) {
        return this.removeCar(car);
      }
    };

    World.prototype.reciveData = function(a, b) {
      return setInterval((function() {
        return sendDataToServer(a, b);
      }), 7000);
    };

    sendDataToServer = function(a, b) {
      var car, d1, dateToRecive, id, ref, results;
      ref = a.all();
      results = [];
      for (id in ref) {
        car = ref[id];
        d1 = new Date;
        dateToRecive = d1.toUTCString().toString();
        car = {
          id: car.id,
          posX: car.coords.x.toString(),
          posY: car.coords.y.toString(),
          dateToRecive: dateToRecive
        };
        results.push(ws.send(JSON.stringify(car)));
      }
      return results;
    };

    return World;

  })();

  ws.onopen = function() {
    return console.log("on open");
  };

  ws.onmessage = function(event) {
    return console.log("on message");
  };

  ws.onerror = function(event) {
    return console.log("error");
  };

  ws.onclose = function(event) {
    return console.log("on close");
  };

  module.exports = World;

}).call(this);
