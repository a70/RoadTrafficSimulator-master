// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var Intersection, Tool, ToolIntersectionBuilder,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('../helpers.coffee');

  Tool = require('./tool.coffee');

  Intersection = require('../model/intersection.coffee');

  ToolIntersectionBuilder = (function(superClass) {
    extend(ToolIntersectionBuilder, superClass);

    function ToolIntersectionBuilder() {
      this.draw = bind(this.draw, this);
      this.mouseout = bind(this.mouseout, this);
      this.mousemove = bind(this.mousemove, this);
      this.mouseup = bind(this.mouseup, this);
      this.mousedown = bind(this.mousedown, this);
      ToolIntersectionBuilder.__super__.constructor.apply(this, arguments);
      this.tempIntersection = null;
      this.mouseDownPos = null;
    }

    ToolIntersectionBuilder.prototype.mousedown = function(e) {
      this.mouseDownPos = this.getCell(e);
      if (e.shiftKey) {
        this.tempIntersection = new Intersection(this.mouseDownPos);
        return e.stopImmediatePropagation();
      }
    };

    ToolIntersectionBuilder.prototype.mouseup = function() {
      if (this.tempIntersection) {
        this.visualizer.world.addIntersection(this.tempIntersection);
        this.tempIntersection = null;
      }
      return this.mouseDownPos = null;
    };

    ToolIntersectionBuilder.prototype.mousemove = function(e) {
      var rect;
      if (this.tempIntersection) {
        rect = this.visualizer.zoomer.getBoundingBox(this.mouseDownPos, this.getCell(e));
        return this.tempIntersection.rect = rect;
      }
    };

    ToolIntersectionBuilder.prototype.mouseout = function() {
      this.mouseDownPos = null;
      return this.tempIntersection = null;
    };

    ToolIntersectionBuilder.prototype.draw = function() {
      if (this.tempIntersection) {
        return this.visualizer.drawIntersection(this.tempIntersection, 0.4);
      }
    };

    return ToolIntersectionBuilder;

  })(Tool);

  module.exports = ToolIntersectionBuilder;

}).call(this);
