// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var Tool, ToolIntersectionMover,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('../helpers.coffee');

  Tool = require('./tool.coffee');

  ToolIntersectionMover = (function(superClass) {
    extend(ToolIntersectionMover, superClass);

    function ToolIntersectionMover() {
      this.mouseout = bind(this.mouseout, this);
      this.mousemove = bind(this.mousemove, this);
      this.mouseup = bind(this.mouseup, this);
      this.mousedown = bind(this.mousedown, this);
      ToolIntersectionMover.__super__.constructor.apply(this, arguments);
      this.intersection = null;
    }

    ToolIntersectionMover.prototype.mousedown = function(e) {
      var intersection;
      intersection = this.getHoveredIntersection(this.getCell(e));
      if (intersection) {
        this.intersection = intersection;
        return e.stopImmediatePropagation();
      }
    };

    ToolIntersectionMover.prototype.mouseup = function() {
      return this.intersection = null;
    };

    ToolIntersectionMover.prototype.mousemove = function(e) {
      var cell;
      if (this.intersection) {
        cell = this.getCell(e);
        this.intersection.rect.left(cell.x);
        this.intersection.rect.top(cell.y);
        return this.intersection.update();
      }
    };

    ToolIntersectionMover.prototype.mouseout = function() {
      return this.intersection = null;
    };

    return ToolIntersectionMover;

  })(Tool);

  module.exports = ToolIntersectionMover;

}).call(this);
