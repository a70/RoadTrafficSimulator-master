// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  var Mover, Tool,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('../helpers.coffee');

  Tool = require('./tool.coffee');

  Mover = (function(superClass) {
    extend(Mover, superClass);

    function Mover() {
      this.mouseout = bind(this.mouseout, this);
      this.mousemove = bind(this.mousemove, this);
      this.mouseup = bind(this.mouseup, this);
      this.mousedown = bind(this.mousedown, this);
      Mover.__super__.constructor.apply(this, arguments);
      this.startPosition = null;
    }

    Mover.prototype.contextmenu = function() {
      return false;
    };

    Mover.prototype.mousedown = function(e) {
      this.startPosition = this.getPoint(e);
      return e.stopImmediatePropagation();
    };

    Mover.prototype.mouseup = function() {
      return this.startPosition = null;
    };

    Mover.prototype.mousemove = function(e) {
      var offset;
      if (this.startPosition) {
        offset = this.getPoint(e).subtract(this.startPosition);
        this.visualizer.zoomer.moveCenter(offset);
        return this.startPosition = this.getPoint(e);
      }
    };

    Mover.prototype.mouseout = function() {
      return this.startPosition = null;
    };

    return Mover;

  })(Tool);

  module.exports = Mover;

}).call(this);
